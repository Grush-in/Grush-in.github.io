// API endpoint –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç VPN –±–æ—Ç–∞
// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π

import { Octokit } from '@octokit/rest';

const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const GITHUB_OWNER = 'Grush-in';
const GITHUB_REPO = 'Grush-in.github.io';
const STATS_FILE_PATH = 'stats.json';

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');

  // Handle preflight
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // Only allow POST
  if (req.method !== 'POST') {
    return res.status(405).json({ 
      error: 'Method not allowed',
      message: 'Only POST requests are accepted'
    });
  }

  try {
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if (process.env.STATS_API_KEY) {
      const authHeader = req.headers.authorization;
      const expectedAuth = `Bearer ${process.env.STATS_API_KEY}`;
      
      if (authHeader !== expectedAuth) {
        return res.status(401).json({ 
          error: 'Unauthorized',
          message: 'Invalid API key'
        });
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const stats = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!stats || typeof stats !== 'object') {
      return res.status(400).json({
        error: 'Bad request',
        message: 'Invalid stats data'
      });
    }

    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      app: stats.app_name,
      online: stats.online_users,
      total: stats.total_users,
      keys: stats.active_keys,
      revenue: stats.revenue_today
    });

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π SHA —Ñ–∞–π–ª–∞ (–Ω—É–∂–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    let sha;
    try {
      const { data } = await octokit.repos.getContent({
        owner: GITHUB_OWNER,
        repo: GITHUB_REPO,
        path: STATS_FILE_PATH,
      });
      sha = data.sha;
      console.log('üìÑ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º...');
    } catch (error) {
      if (error.status === 404) {
        console.log('üìÑ –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
        sha = null;
      } else {
        throw error;
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const content = Buffer.from(JSON.stringify(stats, null, 2)).toString('base64');
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
    const result = await octokit.repos.createOrUpdateFileContents({
      owner: GITHUB_OWNER,
      repo: GITHUB_REPO,
      path: STATS_FILE_PATH,
      message: `üìä Update VPN stats: ${new Date().toISOString()}`,
      content,
      sha, // undefined –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    });

    console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ GitHub');
    console.log('   Commit:', result.data.commit.sha.substring(0, 7));
    
    return res.status(200).json({ 
      success: true,
      message: 'Stats updated successfully',
      commit: result.data.commit.sha.substring(0, 7),
      timestamp: new Date().toISOString()
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    
    return res.status(500).json({ 
      error: 'Internal server error',
      message: error.message,
      timestamp: new Date().toISOString()
    });
  }
}


